[project]
name = "cyberdrop-dl-patched"
authors = [{name = "Jacob B", email = "admin@script-ware.net"}]
dependencies = [
    "aiofiles>=24.1.0,<25",
    "aiohttp-client-cache>=0.12.4,<0.13",
    "aiohttp>=3.11.10,<4",
    "aiolimiter>=1.2.1,<2",
    "aiosqlite==0.17.0",
    "apprise>=1.9.0,<2",
    "arrow>=1.3.0,<2",
    "asyncpraw>=7.8.0,<8",
    "beautifulsoup4>=4.12.2,<5",
    "certifi>=2024.12.14",
    "filedate~=3.0",
    "get-video-properties>=0.1.1,<0.2",
    "inquirerpy>=0.3.4,<0.4",
    "jeepney>=0.8.0,<0.9 ; sys_platform == 'bsd' or sys_platform == 'linux'",
    "mediafire>=0.6.1,<0.7",
    "myjdapi>=1.1.7,<2",
    "pillow>=11.0.0,<12",
    "platformdirs>=4.3.6,<5",
    "pycryptodomex>=3.21.0,<4",
    "pydantic>=2.10.4,<3",
    "pywin32>=308 ; sys_platform == 'win32'",
    "pyyaml>=6.0.2,<7",
    "rich>=13.9.4,<14",
    "send2trash>=1.8.3,<2",
    "xxhash>=3.5.0,<4"
]
description = "Bulk downloader for multiple file hosts"
license = {text = "GPL-3.0-only"}
readme = "README.md"
requires-python = ">=3.11,<4"
version = "6.3.0"

[project.scripts]
cyberdrop-dl = "cyberdrop_dl.main:main"
cyberdrop-dl-patched = "cyberdrop_dl.main:main"

[project.urls]
Changelog = "https://github.com/jbsparrow/CyberDropDownloader/blob/master/CHANGELOG.md"
Documentation = "https://script-ware.gitbook.io/cyberdrop-dl/"
Repository = "https://github.com/jbsparrow/CyberDropDownloader"

[tool.poetry]
include = ["CHANGELOG.md"]
packages = [{include = "cyberdrop_dl"}]
requires-poetry = ">=2.0"

[tool.poetry.group.dev.dependencies]
pre-commit = ">=4.0.1,<5"
ruff = ">=0.8.0,<0.9"
snakeviz = "^2.2.2"

[tool.poetry.group.test.dependencies]
pytest = ">=8.3.4,<9"
pytest-asyncio = ">=0.25.0,<0.26"
pytest-cov = ">=6.0.0,<7"
pytest-mock = "*"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "module"
asyncio_mode = "auto"
minversion = "8.3"
testpaths = ["tests"]

[tool.ruff]
exclude = ["cyberdrop_dl/dependencies/browser_cookie3/__init__.py"]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = [
    "ASYNC",  # async calls that do not await anything or use blocking methods
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "COM8",  # flake8-commas linter
    "E",  # pycodestyle errors
    "F",  # pyflakes
    "FA102",  # future annotations
    "I",  # isort
    "N",  # PEP8 naming conventions
    "PTH",  # use pathlib instead of os
    "Q",  # flake8-quotes
    "RUF",  # RUF specific fixes
    "T20",  # flake8-print
    "TC",  # flake8-type-checking
    "TID",  # flake8-tidy-imports
    "UP",  # pyupgrade
    "W"  # pycodestyle warnings
]
extend-safe-fixes = [
    "TC"  # move import from and to TYPE_CHECKING blocks
]
ignore = [
    "COM812",  # missing-trailing-comma
    "E501",  # suppress line-too-long, let formatter decide
    "N806"  # uppercase variables in functions
]
unfixable = [
    "ERA"  # do not autoremove commented out code
]

[tool.ruff.lint.per-file-ignores]
"**/{tests,docs}/*" = [
    "E402",  # imports not at the top of the file.
    "T20"  # flake8-print
]
"__init__.py" = ["E402"]  # imports not at the top of the file.

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.tomlsort]
all = true
ignore_case = true
in_place = true
sort_first = ["name", "project", "select", "tool"]
spaces_before_inline_comment = 2
spaces_indent_inline_array = 4

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0"]
